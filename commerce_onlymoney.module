<?php
/**
 * @file
 * Provides Onlymoney.com payment services for use with Drupal Commerce.
 */

/**
 * DRUPAL HOOKS
 */

/**
 * Include onlymoney payment method settings
 */
module_load_include('inc', 'commerce_onlymoney', 'commerce_onlymoney.settings');

/**
 * Implements hook_menu().
 */
function commerce_onlymoney_menu() {
  $items = array();

  /**
   * Backwards requests between merchant site and onlymoney.com
   *
   * @return json string
   * @see commerce_onlymoney_page_status
   */
  $items['onlymoney/status'] = array(
    'title' => 'Onlymoney payment status',
    'page callback' => 'commerce_onlymoney_page_status',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_onlymoney.pages.inc',
  );

  /**
   * Successful completion of the transaction
   * Noticing user about successful payment
   *
   * @return drupal output
   * @see commerce_onlymoney_page_success
   */
  $items['onlymoney/success'] = array(
    'title' => 'Onlymoney payment success',
    'page callback' => 'commerce_onlymoney_page_success',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_onlymoney.pages.inc',
  );

  /**
   * Failed transaction (cancelling transaction, deleting order)
   * Noticing user about failed payment
   * Money return in case it was already paid
   *
   * @return drupal output
   * @see commerce_onlymoney_page_failed
   */
  $items['onlymoney/fail'] = array(
    'title' => 'Onlymoney payment failed',
    'page callback' => 'commerce_onlymoney_page_failed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_onlymoney.pages.inc',
  );

  /**
   * User redirect back to merchant site
   * Noticing user about redirecting back to merchant site
   *
   * @return drupal output
   * @see commerce_onlymoney_page_cancel
   */
  $items['onlymoney/cancel'] = array(
    'title' => 'Onlymoney payment cancel',
    'page callback' => 'commerce_onlymoney_page_cancel',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_onlymoney.pages.inc',
  );

  return $items;
}

/**
 * implements hook_help($path, $arg)
 */
function commerce_onlymoney_help($path, $arg) {
  $output = '';
  $settings = _commerce_onlymoney_get_settings();
  switch ($path) {
    case 'admin/help#commerce_onlymoney':
      $output = '<h3>' . t('Onlymoney payment') . '</h3>';
      $output .= '<div>'
        . t('You have to create an account at !url before start using this payment system. Follow the instructions below:',
            array(
              '!url' => l(t('https://onlymoney.com/'), 'https://onlymoney.com/')
            )) . '</div><br />';

      $output .=
        '<div>' . t('After logging in visit !url and fill those fields:', array(
                                                                          '!url' => l(t('https://onlymoney.com/merchant'),
                                                                                      'https://onlymoney.com/merchant')
                                                                        )) . '</div><br />';

      $output .= theme('image', array(
        'path' => drupal_get_path('module', 'commerce_onlymoney')
          . '/images/merchant_instruction_1.png',
        'alt' => t('merchant instructions'),
        'title' => t('merchant instructions')
      ));

      $output .= '<div>'
        . t('After administrator approves merchant status you will get your Secret Key and Merchant ID.') . '</div><br />';

      $output .= theme('image', array(
        'path' => drupal_get_path('module', 'commerce_onlymoney')
          . '/images/merchant_instruction_2.png',
        'alt' => t('merchant instructions'),
        'title' => t('merchant instructions')
      ));

      $output .=
        '<div>' . t('For more details download and read this: !url', array(
          '!url' => l(t('https://onlymoney.com/merchant/manual/'),
                      'https://onlymoney.com/merchant/manual/')
        )) . '</div><br />';

      $output .= '<h3>' . t('Available currencies:') . '</h3>';

      $merch_id = $settings['commerce_onlymoney_merchant_id'];
      $secret_key = $settings['commerce_onlymoney_secret_key'];

      module_load_include('inc', 'commerce_onlymoney', 'onlymoney_api/onlymoney_api');
      $api = new omMerch($merch_id, $secret_key, 'https://onlymoney.com/merchs/');

      $currencies = '';
      foreach ($api->getCurrencies() as $k => $currency) {
        $currencies .= $currency['name'] . ' (' . $k . ')<br />';
      }
      $output .= $currencies;

      $output .= '<h4>' . t('Payment settings') . '</h4>';
      $output .= l(t('Settings'),
                   'admin/commerce/config/payment-methods',
                   array('html' => TRUE, 'absolute' => TRUE)) . '<br />';

  }
  return $output;
}

/**
 * USING COMMERCE PAYMENT API
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_onlymoney_commerce_payment_method_info() {
  $payment_methods['commerce_onlymoney'] = array(
    'title' => t('Onlymoney.com'),
    'description' => t('Easy and safe way to make payments.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 *  User choosing payment method form
 */
function commerce_onlymoney_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $text = theme('image', array(
    'path' =>
      drupal_get_path('module', 'commerce_onlymoney') . '/images/logo.png',
    'alt' => t('Onlymoney'),
    'title' => t('Onlymoney'),
    'attributes' => array('class' => 'logo-onlymoney'),
  ));
  $text .= '<div class="desc">'
    . t('!link - Organization of the electronic payments receiving.', array(
      '!link' => l(t('Onlymoney.com'), 'http://onlymoney.com', array(
        'absolute' => TRUE,
        'attributes' => array(
          'rel' => 'nofollow',
          'title' => t('Onlymoney.com'),
          'alt' => t('Onlymoney.com')
        )
      ))
    )) . '</div>';
  $form['print_receipt'] = array('#markup' => $text);

  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_onlymoney_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  print '<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>';
  print render(drupal_get_form('_commerce_onlymoney_payment_form', $order,
                               $charge, $payment_method));
  print '<script language="javascript" type="text/javascript">jQuery(document).ready(function(){$("form").submit();});</script>';
  exit();
}

/**
 * MODULE FUNCTIONS
 */

/**
 * Load onlymoney settings from Rules Settings
 * @return array
 */
function _commerce_onlymoney_get_settings() {
  $rule = rules_config_load('commerce_payment_commerce_onlymoney');
  $rule_actions = $rule->actions();
  foreach ($rule_actions as $action) {
    $settings = $action->settings['payment_method']['settings'];
  }

  return $settings;
}

/**
 * Build form with payment action to onlymoney.com
 *
 * @param $charge         array
 * @param $payment_method string
 *
 * @return array
 */
function _commerce_onlymoney_payment_form($order, $charge, $payment_method) {
  /**
   * Get settings data
   */
  $settings = _commerce_onlymoney_get_settings();

  $amount = $charge['build_info']['args'][0]->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $currency_code = $charge['build_info']['args'][0]->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $order_number = $charge['build_info']['args'][0]->order_number;

  $description = t('Оплата заказа #!order_number на сайте !site_name', array(
    '!order_number' => $order_number,
    '!site_name' => variable_get('site_name')
  ));

  /**
   * Creating new transaction and saving it
   */
  $transaction = commerce_payment_transaction_new('commerce_onlymoney',
                                                  $order_number);

  if (empty($payment_method->instance_id)) {
    $payment_method->instance_id = 'commerce_onlymoney|commerce_payment_commerce_onlymoney';
  }

  $transaction->instance_id = $payment_method->instance_id;

  $transaction->amount = $amount;
  $transaction->currency_code = $currency_code;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = $description;

  commerce_payment_transaction_save($transaction);

  $data = array(
    'merchant_id' => $settings['commerce_onlymoney_merchant_id'],
    'order_id' => $order_number,
    'amount' => $amount / 100, // commerce amount format features
    'currency' => $currency_code,
  );
  $secret_key = $settings['commerce_onlymoney_secret_key'];

  $json = json_encode($data);
  $signature = base64_encode(urlencode(sha1($secret_key . $json
                                            . $secret_key)));

  $operation = base64_encode(urlencode($json));

  $form = array();
  $form['#action'] = $settings['commerce_onlymoney_api_url'];

  $form['act'] = array(
    '#type' => 'hidden',
    '#value' => 'custom',
  );

  $form['operation'] = array(
    '#type' => 'hidden',
    '#value' => $operation,
  );

  $form['signature'] = array(
    '#type' => 'hidden',
    '#value' => $signature,
  );

  $form['description'] = array(
    '#type' => 'hidden',
    '#value' => $description,
  );

  return $form;
}
